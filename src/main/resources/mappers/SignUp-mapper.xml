<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.red.domovie.domain.mapper.LoginMapper">

	<!-- 기존 쿼리문들 -->
	<insert id="saveUser"
		parameterType="com.red.domovie.domain.entity.UserEntity">
		<!-- 새 사용자 정보를 데이터베이스에 저장합니다. -->
		INSERT INTO user (user_name, nick_name, email, phone_number, password,
		birth_date)
		VALUES (#{userName}, #{nickName}, #{email}, #{phoneNumber}, #{password},
		#{birthDate})
	</insert>
	<select id="countByEmail" parameterType="string"
		resultType="int">
		<!-- 주어진 이메일 주소와 일치하는 사용자의 수를 반환합니다. 이메일 중복 확인에 사용됩니다. -->
		SELECT COUNT(*) FROM user WHERE email = #{email}
	</select>
	<select id="findEmailByNameAndBirthDate"
		parameterType="com.red.domovie.domain.dto.login.FindIdDTO"
		resultType="String">
		<!-- 주어진 사용자 이름과 생년월일에 해당하는 사용자의 이메일을 찾습니다. 아이디 찾기 기능에 사용됩니다. -->
		SELECT email
		FROM user
		WHERE user_name = #{userName} AND birth_date = #{birthDate}
	</select>
	
	<!-- 사용자가 넘긴 이메일이랑 일치하는 계정의 이메일이 있는지 확인 -->
	<select id="findByEmail"
		resultType="com.red.domovie.domain.entity.UserEntity">
		<!-- 사용자 이름과 이메일로 사용자를 찾습니다. 비밀번호 재설정 요청 시 사용자 확인에 사용됩니다. -->
		SELECT * FROM user WHERE email = #{email}
	</select>
	
	
	<update id="updateUser"
		parameterType="com.red.domovie.domain.entity.UserEntity">
		<!--일치하는 이메일 계정에 인증용 토큰을 저장하는 로직 -->
		UPDATE user
		SET password_reset_token = #{passwordResetToken}
		WHERE email = #{email}
	</update>
	
	<!--넘어온 토큰값이 이메일에서 넘어온거랑 일치하는지 확인-->
	<select id="findByPasswordResetToken"
		resultType="com.red.domovie.domain.entity.UserEntity">
		SELECT user_id FROM user WHERE password_reset_token = #{token}
	</select>
	
	
	<update id="updatePassword">
		<!--일치하는 이메일 계정에 인증용 토큰을 저장하는 로직 -->
		UPDATE user
		SET password_reset_token = null,
		    password=#{param1}
		WHERE password_reset_token = #{param2}
	</update>

</mapper>
